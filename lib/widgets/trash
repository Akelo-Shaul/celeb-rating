
  late bool _isLiked;

    _initLikeState();
void _initLikeState() {
    final String userId = UserService.currentUserId.toString();
    _isLiked = widget.flick.likes.any((like) => like.userId == userId);
}

  Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  GestureDetector(
                    onTap: () async {
                      final String userId = UserService.currentUserId.toString();
                      setState(() {
                        if (_isLiked) {
                          widget.flick.likes.removeWhere((like) => like.userId == userId);
                        } else {
                          widget.flick.likes.add(Like(
                            userId: userId,
                            likedAt: DateTime.now(),
                          ));
                        }
                        _isLiked = !_isLiked;
                      });
                      // Here you would typically update the like in your backend
                      print('Like toggled for Flick ${widget.flick.id}. New likes count: ${widget.flick.likes.length}');
                    },
                    child: Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 8.0, vertical: 4.0),
                      child: Row(
                        children: [
                          Image.asset(
                            _isLiked ? 'assets/icons/saluted.png' : 'assets/icons/salute.png',
                            width: 24,
                            height: 24,
                            errorBuilder: (context, error, stackTrace) {
                              // Fallback icon if image assets are missing
                              return Icon(
                                _isLiked ? Icons.favorite : Icons.favorite_border,
                                color: _isLiked ? Colors.red : Colors.white,
                                size: 24,
                              );
                            },
                          ),
                          const SizedBox(width: 6),
                          Text(
                            widget.flick.likes.length.toString(),
                            style: const TextStyle(
                              color: Colors.white,
                              fontSize: 19,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                  const SizedBox(height: 24),
                  _buildActionItem(
                    icon: Icons.chat_bubble_outline,
                    count: widget.flick.comments.length,
                    onTap: (){
                      _showCommentsModal(context, widget.flick.comments);
                    },
                  ),
                  const SizedBox(height: 24),
                  GestureDetector(
                    onTap: (){
                      //TODO: Show share functionality and modal
                    },
                    child: SvgPicture.asset(
                      'assets/icons/share.svg', // Replace with your icon's path
                      height: 28,
                      width: 28,
                      colorFilter: ColorFilter.mode(Color(0xFFBDBCBA), BlendMode.srcIn), // You can easily change colors
                    ),
                  ),
                  const SizedBox(height: 24),
                  GestureDetector(
                    onTap: (){
                      //TODO: Show share functionality and modal
                    },
                    child: SvgPicture.asset(
                      'assets/icons/bookmark_outlined.svg', // TODO: Add functionality for bookmark
                      height: 28,
                      width: 28,
                      colorFilter: ColorFilter.mode(Color(0xFFBDBCBA), BlendMode.srcIn), // You can easily change colors
                    ),
                  ),
                  const SizedBox(height: 24),
                  _buildActionItem(
                    icon: _muted ? Icons.volume_off : Icons.volume_up,
                    count: null,
                    onTap: _toggleMute,
                  ),
                  const SizedBox(height: 48),
                ],
              ),